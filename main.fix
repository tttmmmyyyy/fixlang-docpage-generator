module Main;

import Subprocess;
import Minilib.Encoding.Json.JsonDecoder;
import Minilib.Encoding.Json;
import Minilib.Collection.OrderedMap;

type ProcessName = String;

easy_run : Array String -> IO String;
easy_run = |commands| (
    let commands_str = commands.to_iter.join(" ");
    eprintln(commands_str);;
    let ((out, err), status) = *Subprocess::run_string(commands.@(0), commands, "").try(exit_with_msg(1));
    when(err.get_size > 0, eprintln(err));;
    check_exit_staus(status, "`" + commands_str + "`");;
    pure(out)
);

check_exit_staus : ExitStatus -> ProcessName -> IO ();
check_exit_staus = |status, process_name| (
    match status {
        exit(code) => (
            if code == 0_U8 {
                pure()
            } else {
                let msg = "error: " + process_name + " exited with code " + code.to_string;
                eprintln(msg);;
                exit(1)
            }
        ),
        signaled(signal) => (
            let msg = "error: " + process_name + " terminated by signal " + signal.to_string;
            eprintln(msg);;
            exit(1)
        ),
        wait_failed() => (
            let msg = "error: " + "failed to waiting termination of " + process_name;
            eprintln(msg);;
            exit(1)
        )
    }
);

is_exit_status_ok : ExitStatus -> Bool;
is_exit_status_ok = |status| (
    match status {
        exit(code) => code == 0_U8,
        _ => false
    }
);

change_dir : String -> IO ();
change_dir = |dir| (
    let code = *dir.borrow_c_str_io(|c_str| FFI_CALL_IO[CInt chdir(Ptr), c_str]);
    when(code != 0.to_CInt, 
        let msg = "error: failed to change directory to " + dir;
        eprintln(msg);;
        exit(1)
    );;
    pure()
);

// Information of a package.
type ProjInfo = box struct {
    name : String,
    loc : String,
    ver : String,
    modules : Array String
};

build_docs : IO ();
build_docs = (
    // Prepare a directory to store the documentation.
    let docs_dir = "docs";
    ["rm", "-rf", docs_dir].easy_run;;    // Remove the directory if it exists.
    ["mkdir", "-p", docs_dir].easy_run;;    // Create the directory.

    // Download the standard library documentation.
    let std_doc_url = "https://raw.githubusercontent.com/tttmmmyyyy/fixlang/refs/heads/main/std_doc/Std.md";
    let std_doc = docs_dir + "/" + "Std.md";
    ["wget", "-q", std_doc_url, "-O", std_doc].easy_run;;

    // Run `fix deps list --json` to get the list of all available fix projects.
    let packages = *["fix", "deps", "list", "--json"].easy_run;

    // Parse `packages`.
    let packages = JsonDecoder::decode(packages);
    if packages.is_err {
        eprintln("error: failed to parse the output of `fix deps list --json`: ");;
        eprintln(packages.as_err);;
        exit(1)
    };
    let packages = packages.as_ok;
    let packages : Result ErrMsg (Array ProjInfo) = do {
        match packages {
            Json::array(packages) => (
                Result::ok $ *packages.to_iter.loop_iter_m([], |entry, packages|
                    if !entry.is_object { Result::err $ "error: failed to parse the output of `fix deps list --json`: expected an array of objects" };
                    let entry = entry.as_object;

                    let name = entry.find("name");
                    if name.is_none { Result::err $ "error: failed to parse the output of `fix deps list --json`: expected a field `name`" };
                    let name = name.as_some;
                    if !name.is_string { Result::err $ "error: failed to parse the output of `fix deps list --json`: expected a string for the field `name`" };
                    let name = name.as_string;

                    let loc = entry.find("git");
                    if loc.is_none { Result::err $ "error: failed to parse the output of `fix deps list --json`: expected a field `git`" };
                    let loc = loc.as_some;
                    if !loc.is_string { Result::err $ "error: failed to parse the output of `fix deps list --json`: expected a string for the field `git`" };
                    let loc = loc.as_string;

                    let prj_info = ProjInfo { name : name, loc : loc, ver : "", modules : [] };
                    let deps_list = packages.push_back(prj_info);
                    continue_m $ deps_list
                )
            ),
            _ => Result::err $ "error: failed to parse the output of `fix deps list --json`: expected an array",
        }
    };
    if packages.is_err {
        eprintln(packages.as_err);;
        exit(1)
    };
    let packages = packages.as_ok;

    // Remove the working directory if it exists.
    let packages_dir = "packages";
    ["rm", "-rf", packages_dir].easy_run;;

    // Create working directory.
    ["mkdir", "-p", packages_dir].easy_run;;

    // Move to working directory.
    change_dir(packages_dir);;

    // Clone each projects.
    let packages = *packages.to_iter.loop_iter_m([], |prj_info, packages|
        // Create the directory to clone the repository.
        let work_dir = prj_info.@name;
        ["mkdir", "-p", work_dir].easy_run;;

        // Clone the repository.
        ["git", "clone", "--quiet", "--tags", prj_info.@loc, work_dir].easy_run;;

        // cd to the working directory.
        change_dir(work_dir);;

        // Get the latest tag.
        let tag = *["git", "describe", "--tags", "--abbrev=0"].easy_run;
        let tag = tag.strip_spaces;

        // If the latest tag found, checkout it.
        when(tag.get_size > 0, 
            ["git", "checkout", "--quiet", tag].easy_run.forget
        );;

        // Install dependencies.
        ["fix", "deps", "install"].easy_run;;

        // Prepare empty `tmp` directory.
        let tmp = "../../tmp";
        ["rm", "-rf", tmp].easy_run;; // Remove the directory if it exists.
        ["mkdir", "-p", tmp].easy_run;; // Create the directory.

        // Generate documentation in `tmp`.
        ["fix", "docs", "-o", tmp].easy_run;;

        // Get the list of markdown files in `tmp`.
        let md_files = *["find", tmp, "-name", "*.md"].easy_run;

        // Parse `md_files` to get the list of module names.
        let md_files = md_files.split("\n").map(strip_spaces).filter(|s| s.get_size > 0);
        let modules = md_files.map(|md_file| md_file.get_sub((tmp + "/").get_size, md_file.get_size - ".md".get_size));
        let modules = modules.to_array.sort_by(|(a, b)| a < b);

        // Move all contents in `tmp` to `docs_dir`.
        modules.to_iter.fold_m((), |mod, _|
            ["mv", tmp + "/" + mod + ".md", "../../" + docs_dir].easy_run.forget
        );;

        // Pop the working directory.
        change_dir("..");;

        let prj_info = prj_info.set_ver(tag).set_modules(modules);
        let packages = packages.push_back(prj_info);

        continue_m $ packages
    );

    // Pop the working directory.
    change_dir("..");;

    // Create `index.md`.
    println("Creating index.md...");;
    let index_md = "docs/index.md";
    with_file(index_md, "w", |file|
        write_string(file, "# Index\n\n");;
        write_string(file, "This page contains the documentation of the following projects and modules (and \"Std\"): \n\n");;
        packages.to_iter.fold_m((), |prj_info, _|
            write_string(file, "- [" + prj_info.@name + "](" + prj_info.@loc + ")@" + prj_info.@ver + "\n");;
            let mod_links = prj_info.@modules.to_iter.map(|mod| "[" + mod + "](" + mod + ".md)").join(", ");
            write_string(file, "    - " + mod_links + "\n")
        );;
        write_string(file, "\n");;
        write_string(file, "This page was generated by [fixlang-docpage-generator](https://github.com/tttmmmyyyy/fixlang-docpage-generator/).\n\n")
    ).try(exit_with_msg(1));;

    // Done.
    println("Done.");;
    
    pure()
);

main : IO ();
main = (
    build_docs
);
